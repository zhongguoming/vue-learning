# 组件化

## 组件化思想

* 拆分成一个个组件，组成组件树。
* 组件可以复用，提高工作效率。

## 组件基本使用

1. 组件构造器
2. 注册组件
3. 使用组件

组件构造器多种写法：
1. ``
2. 模板直接在外部

组件注册 
* 全局注册
* 局部注册 在Vue实例中注册，cnp 是组件名， 后边是构造器。

## 组件data必须是函数

首先组件是复用，要保证组件之间相互独立，数据不会相互影响。
内存方面分析：每调用一次function,返回一个新的对象，就是新的内存地址，不同的组件指向不同的内存地址。

## 父组件和子组件

父组件里的components里注册子组件。
根组件，Vue实例

## 父组件和子组件通信

父传子： 通过pros
子传父： 通过发送事件，$emit

### 父组件传子组件
因为作用域编译，子组件不能访问父组件的data。

### 单向数据流
防止从子组件意外变更父级组件的状态。

* 作为初始值，在data中定义一个变量保存。
* 作为转换值，定义一个计算属性。

>  中对象和数组是通过引用传入的,改变对象或数组会引起父组件状态改变。

传递方式：
* 数组
* 对象 (推荐)
    * 类型约束，判断
    * 提供默认值
    * 是否必传
    * 对应数组或对象类型，需要function返回对象实例。
    * 添加校验器
    * 添加自定义类型

> 注意：v-bind绑定属性，是把一个变量赋给属性，如果没有v-bind,传递就是字符串。
> 注意prpos驼峰需要转化带-:例如 cMessage 要转换成 c-message

### 子组件传父组件

通过自定义事件
* $emit('事件名',{对象}) 触发事件
* v-on监听事件

## 同时el 和 template存在，区别